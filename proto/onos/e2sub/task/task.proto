/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

// Package onos.e2sub.task defines the interior gRPC interface for E2 termination registry service
package onos.e2sub.task;

import "gogoproto/gogo.proto";

// E2SubscriptionTaskService manages subscription tasks between E2 termination points and E2 nodes
service E2SubscriptionTaskService {
    // GetSubscriptionTask retrieves information about a specific task
    rpc GetSubscriptionTask (GetSubscriptionTaskRequest) returns (GetSubscriptionTaskResponse);

    // ListSubscriptionTasks returns the list of currently registered E2 Tasks.
    rpc ListSubscriptionTasks (ListSubscriptionTasksRequest) returns (ListSubscriptionTasksResponse);

    // WatchSubscriptionTasks returns a stream of changes in the set of available E2 Tasks.
    rpc WatchSubscriptionTasks (WatchSubscriptionTasksRequest) returns (stream WatchSubscriptionTasksResponse);

    // UpdateSubscriptionTask updates a task status
    rpc UpdateSubscriptionTask (UpdateSubscriptionTaskRequest) returns (UpdateSubscriptionTaskResponse);
}

// Lifecycle is a subscription task status
message Lifecycle {
    Phase phase = 1;
    Status status = 2;
    Failure failure = 3;
}

// Phase is a subscription task phase
enum Phase {
    // OPEN is a subscription task open phase
    OPEN = 0;
    // CLOSE is a subscription task close phase
    CLOSE = 1;
}

// Status is a subscription task status
enum Status {
    // PENDING indicates the subscription task phase is pending
    PENDING = 0;
    // COMPLETE indicates the subscription task phase is complete
    COMPLETE = 1;
    // FAILED indicates the subscription task phase failed
    FAILED = 2;
}

// Failure is a subscription failure status
message Failure {
    Cause cause = 1;
    string message = 2;
}

// Cause is a failure cause
enum Cause {
    CAUSE_UNKNOWN = 0;
    CAUSE_MISC_CONTROL_PROCESSING_OVERLOAD = 1;
    CAUSE_MISC_HARDWARE_FAILURE = 2;
    CAUSE_MISC_OM_INTERVENTION = 3;
    CAUSE_MISC_UNSPECIFIED = 4;
    CAUSE_PROTOCOL_TRANSFER_SYNTAX_ERROR = 5;
    CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_REJECT = 6;
    CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_IGNORE_AND_NOTIFY = 7;
    CAUSE_PROTOCOL_MESSAGE_NOT_COMPATIBLE_WITH_RECEIVER_STATE = 8;
    CAUSE_PROTOCOL_SEMANTIC_ERROR = 9;
    CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_FALSELY_CONSTRUCTED_MESSAGE = 10;
    CAUSE_PROTOCOL_UNSPECIFIED = 11;
    CAUSE_RIC_RAN_FUNCTION_ID_INVALID = 12;
    CAUSE_RIC_ACTION_NOT_SUPPORTED = 13;
    CAUSE_RIC_EXCESSIVE_ACTIONS = 14;
    CAUSE_RIC_DUPLICATE_ACTION = 15;
    CAUSE_RIC_DUPLICATE_EVENT = 16;
    CAUSE_RIC_FUNCTION_RESOURCE_LIMIT = 17;
    CAUSE_RIC_REQUEST_ID_UNKNOWN = 18;
    CAUSE_RIC_INCONSISTENT_ACTION_SUBSEQUENT_ACTION_SEQUENCE = 19;
    CAUSE_RIC_CONTROL_MESSAGE_INVALID = 20;
    CAUSE_RIC_CALL_PROCESS_ID_INVALID = 21;
    CAUSE_RIC_UNSPECIFIED = 22;
    CAUSE_RICSERVICE_FUNCTION_NOT_REQUIRED = 23;
    CAUSE_RICSERVICE_EXCESSIVE_FUNCTIONS = 24;
    CAUSE_RICSERVICE_RIC_RESOURCE_LIMIT = 25;
    CAUSE_TRANSPORT_UNSPECIFIED = 26;
    CAUSE_TRANSPORT_TRANSPORT_RESOURCE_UNAVAILABLE = 27;
}

// SubscriptionTask is a task representing a subscription between an E2 termination and an E2 node
message SubscriptionTask {
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "ID"];
    uint64 revision = 2 [(gogoproto.casttype) = "Revision"];
    string subscription_id = 3 [(gogoproto.customname) = "SubscriptionID", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/e2sub/subscription.ID"];
    string endpoint_id = 4 [(gogoproto.customname) = "EndpointID", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/e2sub/endpoint.ID"];
    Lifecycle lifecycle = 5 [(gogoproto.nullable) = false];
}

// Type of change
enum EventType {
    NONE = 0;
    CREATED = 1;
    UPDATED = 2;
    REMOVED = 3;
}

// Event is a SubscriptionTask event
message Event {
    EventType type = 1;
    SubscriptionTask task = 2 [(gogoproto.nullable) = false];
}

// GetSubscriptionTaskRequest is a request for getting existing SubscriptionTask
message GetSubscriptionTaskRequest {
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "ID"];
}

// GetSubscriptionTaskResponse is a response with invormation about a requested SubscriptionTask
message GetSubscriptionTaskResponse {
    SubscriptionTask task = 1;
}

// ListSubscriptionTasksRequest is a request to list all available SubscriptionTasks
message ListSubscriptionTasksRequest {
    string subscription_id = 1 [(gogoproto.customname) = "SubscriptionID", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/e2sub/subscription.ID"];
    string endpoint_id = 2 [(gogoproto.customname) = "EndpointID", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/e2sub/endpoint.ID"];
}

// ListSubscriptionTasksResponse is a response to list all available SubscriptionTasks
message ListSubscriptionTasksResponse {
    repeated SubscriptionTask tasks = 1 [(gogoproto.nullable) = false];
}

// WatchSubscriptionTasksRequest is a request to receive a stream of all SubscriptionTask changes.
message WatchSubscriptionTasksRequest {
    bool noreplay = 1;
    string subscription_id = 2 [(gogoproto.customname) = "SubscriptionID", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/e2sub/subscription.ID"];
    string endpoint_id = 3 [(gogoproto.customname) = "EndpointID", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/e2sub/endpoint.ID"];
}

// WatchSubscriptionTasksResponse is a response indicating a change in the available SubscriptionTasks.
message WatchSubscriptionTasksResponse {
    Event event = 1 [(gogoproto.nullable) = false];
}

// UpdateSubscriptionTaskRequest is a request for updating a SubscriptionTask status
message UpdateSubscriptionTaskRequest {
    SubscriptionTask task = 1;
}

// UpdateSubscriptionTaskResponse is a response to updating a SubscriptionTask status
message UpdateSubscriptionTaskResponse {
}
