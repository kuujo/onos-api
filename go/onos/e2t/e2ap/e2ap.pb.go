// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/e2t/e2ap/e2ap.proto

// Package onos.e2t.e2ap defines the interior gRPC interfaces for xApps to interact with E2T.

package e2ap

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EncodingType int32

const (
	EncodingType_PROTO    EncodingType = 0
	EncodingType_ASN1_PER EncodingType = 1
	EncodingType_ASN1_XER EncodingType = 2
)

var EncodingType_name = map[int32]string{
	0: "PROTO",
	1: "ASN1_PER",
	2: "ASN1_XER",
}

var EncodingType_value = map[string]int32{
	"PROTO":    0,
	"ASN1_PER": 1,
	"ASN1_XER": 2,
}

func (x EncodingType) String() string {
	return proto.EnumName(EncodingType_name, int32(x))
}

func (EncodingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0e1a04ad0f6e2726, []int{0}
}

type Error_Cause_Misc_Type int32

const (
	Error_Cause_Misc_UNSPECIFIED                 Error_Cause_Misc_Type = 0
	Error_Cause_Misc_CONTROL_PROCESSING_OVERLOAD Error_Cause_Misc_Type = 1
	Error_Cause_Misc_HARDWARE_FAILURE            Error_Cause_Misc_Type = 2
	Error_Cause_Misc_OM_INTERVENTION             Error_Cause_Misc_Type = 3
)

var Error_Cause_Misc_Type_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "CONTROL_PROCESSING_OVERLOAD",
	2: "HARDWARE_FAILURE",
	3: "OM_INTERVENTION",
}

var Error_Cause_Misc_Type_value = map[string]int32{
	"UNSPECIFIED":                 0,
	"CONTROL_PROCESSING_OVERLOAD": 1,
	"HARDWARE_FAILURE":            2,
	"OM_INTERVENTION":             3,
}

func (x Error_Cause_Misc_Type) String() string {
	return proto.EnumName(Error_Cause_Misc_Type_name, int32(x))
}

func (Error_Cause_Misc_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0e1a04ad0f6e2726, []int{4, 0, 1, 0}
}

type Error_Cause_Protocol_Type int32

const (
	Error_Cause_Protocol_UNSPECIFIED                                       Error_Cause_Protocol_Type = 0
	Error_Cause_Protocol_TRANSFER_SYNTAX_ERROR                             Error_Cause_Protocol_Type = 1
	Error_Cause_Protocol_ABSTRACT_SYNTAX_ERROR_REJECT                      Error_Cause_Protocol_Type = 2
	Error_Cause_Protocol_ABSTRACT_SYNTAX_ERROR_IGNORE_AND_NOTIFY           Error_Cause_Protocol_Type = 3
	Error_Cause_Protocol_MESSAGE_NOT_COMPATIBLE_WITH_RECEIVER_STATE        Error_Cause_Protocol_Type = 4
	Error_Cause_Protocol_SEMANTIC_ERROR                                    Error_Cause_Protocol_Type = 5
	Error_Cause_Protocol_ABSTRACT_SYNTAX_ERROR_FALSELY_CONSTRUCTED_MESSAGE Error_Cause_Protocol_Type = 6
)

var Error_Cause_Protocol_Type_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "TRANSFER_SYNTAX_ERROR",
	2: "ABSTRACT_SYNTAX_ERROR_REJECT",
	3: "ABSTRACT_SYNTAX_ERROR_IGNORE_AND_NOTIFY",
	4: "MESSAGE_NOT_COMPATIBLE_WITH_RECEIVER_STATE",
	5: "SEMANTIC_ERROR",
	6: "ABSTRACT_SYNTAX_ERROR_FALSELY_CONSTRUCTED_MESSAGE",
}

var Error_Cause_Protocol_Type_value = map[string]int32{
	"UNSPECIFIED":                                       0,
	"TRANSFER_SYNTAX_ERROR":                             1,
	"ABSTRACT_SYNTAX_ERROR_REJECT":                      2,
	"ABSTRACT_SYNTAX_ERROR_IGNORE_AND_NOTIFY":           3,
	"MESSAGE_NOT_COMPATIBLE_WITH_RECEIVER_STATE":        4,
	"SEMANTIC_ERROR":                                    5,
	"ABSTRACT_SYNTAX_ERROR_FALSELY_CONSTRUCTED_MESSAGE": 6,
}

func (x Error_Cause_Protocol_Type) String() string {
	return proto.EnumName(Error_Cause_Protocol_Type_name, int32(x))
}

func (Error_Cause_Protocol_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0e1a04ad0f6e2726, []int{4, 0, 2, 0}
}

type Error_Cause_Ric_Type int32

const (
	Error_Cause_Ric_UNSPECIFIED                                    Error_Cause_Ric_Type = 0
	Error_Cause_Ric_RAN_FUNCTION_ID_INVALID                        Error_Cause_Ric_Type = 1
	Error_Cause_Ric_ACTION_NOT_SUPPORTED                           Error_Cause_Ric_Type = 2
	Error_Cause_Ric_EXCESSIVE_ACTIONS                              Error_Cause_Ric_Type = 3
	Error_Cause_Ric_DUPLICATE_ACTION                               Error_Cause_Ric_Type = 4
	Error_Cause_Ric_DUPLICATE_EVENT                                Error_Cause_Ric_Type = 5
	Error_Cause_Ric_FUNCTION_RESOURCE_LIMIT                        Error_Cause_Ric_Type = 6
	Error_Cause_Ric_REQUEST_ID_UNKNOWN                             Error_Cause_Ric_Type = 7
	Error_Cause_Ric_INCONSISTENT_ACTION_SUBSEQUENT_ACTION_SEQUENCE Error_Cause_Ric_Type = 8
	Error_Cause_Ric_CONTROL_MESSAGE_INVALID                        Error_Cause_Ric_Type = 9
	Error_Cause_Ric_CALL_PROCESS_ID_INVALID                        Error_Cause_Ric_Type = 10
)

var Error_Cause_Ric_Type_name = map[int32]string{
	0:  "UNSPECIFIED",
	1:  "RAN_FUNCTION_ID_INVALID",
	2:  "ACTION_NOT_SUPPORTED",
	3:  "EXCESSIVE_ACTIONS",
	4:  "DUPLICATE_ACTION",
	5:  "DUPLICATE_EVENT",
	6:  "FUNCTION_RESOURCE_LIMIT",
	7:  "REQUEST_ID_UNKNOWN",
	8:  "INCONSISTENT_ACTION_SUBSEQUENT_ACTION_SEQUENCE",
	9:  "CONTROL_MESSAGE_INVALID",
	10: "CALL_PROCESS_ID_INVALID",
}

var Error_Cause_Ric_Type_value = map[string]int32{
	"UNSPECIFIED":                                    0,
	"RAN_FUNCTION_ID_INVALID":                        1,
	"ACTION_NOT_SUPPORTED":                           2,
	"EXCESSIVE_ACTIONS":                              3,
	"DUPLICATE_ACTION":                               4,
	"DUPLICATE_EVENT":                                5,
	"FUNCTION_RESOURCE_LIMIT":                        6,
	"REQUEST_ID_UNKNOWN":                             7,
	"INCONSISTENT_ACTION_SUBSEQUENT_ACTION_SEQUENCE": 8,
	"CONTROL_MESSAGE_INVALID":                        9,
	"CALL_PROCESS_ID_INVALID":                        10,
}

func (x Error_Cause_Ric_Type) String() string {
	return proto.EnumName(Error_Cause_Ric_Type_name, int32(x))
}

func (Error_Cause_Ric_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0e1a04ad0f6e2726, []int{4, 0, 3, 0}
}

type Error_Cause_RicService_Type int32

const (
	Error_Cause_RicService_UNSPECIFIED           Error_Cause_RicService_Type = 0
	Error_Cause_RicService_FUNCTION_NOT_REQUIRED Error_Cause_RicService_Type = 1
	Error_Cause_RicService_EXCESSIVE_FUNCTIONS   Error_Cause_RicService_Type = 2
	Error_Cause_RicService_RIC_RESOURCE_LIMIT    Error_Cause_RicService_Type = 3
)

var Error_Cause_RicService_Type_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "FUNCTION_NOT_REQUIRED",
	2: "EXCESSIVE_FUNCTIONS",
	3: "RIC_RESOURCE_LIMIT",
}

var Error_Cause_RicService_Type_value = map[string]int32{
	"UNSPECIFIED":           0,
	"FUNCTION_NOT_REQUIRED": 1,
	"EXCESSIVE_FUNCTIONS":   2,
	"RIC_RESOURCE_LIMIT":    3,
}

func (x Error_Cause_RicService_Type) String() string {
	return proto.EnumName(Error_Cause_RicService_Type_name, int32(x))
}

func (Error_Cause_RicService_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0e1a04ad0f6e2726, []int{4, 0, 4, 0}
}

type Error_Cause_Transport_Type int32

const (
	Error_Cause_Transport_UNSPECIFIED                    Error_Cause_Transport_Type = 0
	Error_Cause_Transport_TRANSPORT_RESOURCE_UNAVAILABLE Error_Cause_Transport_Type = 1
)

var Error_Cause_Transport_Type_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "TRANSPORT_RESOURCE_UNAVAILABLE",
}

var Error_Cause_Transport_Type_value = map[string]int32{
	"UNSPECIFIED":                    0,
	"TRANSPORT_RESOURCE_UNAVAILABLE": 1,
}

func (x Error_Cause_Transport_Type) String() string {
	return proto.EnumName(Error_Cause_Transport_Type_name, int32(x))
}

func (Error_Cause_Transport_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0e1a04ad0f6e2726, []int{4, 0, 5, 0}
}

type Source struct {
	AppID     AppID     `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3,casttype=AppID" json:"app_id,omitempty"`
	AppNodeID AppNodeID `protobuf:"bytes,2,opt,name=app_node_id,json=appNodeId,proto3,casttype=AppNodeID" json:"app_node_id,omitempty"`
}

func (m *Source) Reset()         { *m = Source{} }
func (m *Source) String() string { return proto.CompactTextString(m) }
func (*Source) ProtoMessage()    {}
func (*Source) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e1a04ad0f6e2726, []int{0}
}
func (m *Source) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Source) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Source.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Source) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Source.Merge(m, src)
}
func (m *Source) XXX_Size() int {
	return m.Size()
}
func (m *Source) XXX_DiscardUnknown() {
	xxx_messageInfo_Source.DiscardUnknown(m)
}

var xxx_messageInfo_Source proto.InternalMessageInfo

func (m *Source) GetAppID() AppID {
	if m != nil {
		return m.AppID
	}
	return ""
}

func (m *Source) GetAppNodeID() AppNodeID {
	if m != nil {
		return m.AppNodeID
	}
	return ""
}

type Target struct {
	E2NodeID E2NodeID `protobuf:"bytes,1,opt,name=e2_node_id,json=e2NodeId,proto3,casttype=E2NodeID" json:"e2_node_id,omitempty"`
}

func (m *Target) Reset()         { *m = Target{} }
func (m *Target) String() string { return proto.CompactTextString(m) }
func (*Target) ProtoMessage()    {}
func (*Target) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e1a04ad0f6e2726, []int{1}
}
func (m *Target) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Target) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Target.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Target) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Target.Merge(m, src)
}
func (m *Target) XXX_Size() int {
	return m.Size()
}
func (m *Target) XXX_DiscardUnknown() {
	xxx_messageInfo_Target.DiscardUnknown(m)
}

var xxx_messageInfo_Target proto.InternalMessageInfo

func (m *Target) GetE2NodeID() E2NodeID {
	if m != nil {
		return m.E2NodeID
	}
	return ""
}

type ServiceModel struct {
	Name    ServiceModelName    `protobuf:"bytes,1,opt,name=name,proto3,casttype=ServiceModelName" json:"name,omitempty"`
	Version ServiceModelVersion `protobuf:"bytes,2,opt,name=version,proto3,casttype=ServiceModelVersion" json:"version,omitempty"`
}

func (m *ServiceModel) Reset()         { *m = ServiceModel{} }
func (m *ServiceModel) String() string { return proto.CompactTextString(m) }
func (*ServiceModel) ProtoMessage()    {}
func (*ServiceModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e1a04ad0f6e2726, []int{2}
}
func (m *ServiceModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceModel.Merge(m, src)
}
func (m *ServiceModel) XXX_Size() int {
	return m.Size()
}
func (m *ServiceModel) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceModel.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceModel proto.InternalMessageInfo

func (m *ServiceModel) GetName() ServiceModelName {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceModel) GetVersion() ServiceModelVersion {
	if m != nil {
		return m.Version
	}
	return ""
}

type Payload struct {
	EncodingType EncodingType `protobuf:"varint,1,opt,name=encoding_type,json=encodingType,proto3,enum=onos.e2t.e2ap.EncodingType" json:"encoding_type,omitempty"`
	Data         []byte       `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Payload) Reset()         { *m = Payload{} }
func (m *Payload) String() string { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()    {}
func (*Payload) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e1a04ad0f6e2726, []int{3}
}
func (m *Payload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Payload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Payload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Payload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payload.Merge(m, src)
}
func (m *Payload) XXX_Size() int {
	return m.Size()
}
func (m *Payload) XXX_DiscardUnknown() {
	xxx_messageInfo_Payload.DiscardUnknown(m)
}

var xxx_messageInfo_Payload proto.InternalMessageInfo

func (m *Payload) GetEncodingType() EncodingType {
	if m != nil {
		return m.EncodingType
	}
	return EncodingType_PROTO
}

func (m *Payload) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// Error is an E2AP protocol error
type Error struct {
	Cause *Error_Cause `protobuf:"bytes,1,opt,name=cause,proto3" json:"cause,omitempty"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e1a04ad0f6e2726, []int{4}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return m.Size()
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetCause() *Error_Cause {
	if m != nil {
		return m.Cause
	}
	return nil
}

type Error_Cause struct {
	// Types that are valid to be assigned to Cause:
	//	*Error_Cause_Unknown_
	//	*Error_Cause_Protocol_
	//	*Error_Cause_Ric_
	//	*Error_Cause_RicService_
	//	*Error_Cause_Transport_
	Cause isError_Cause_Cause `protobuf_oneof:"cause"`
}

func (m *Error_Cause) Reset()         { *m = Error_Cause{} }
func (m *Error_Cause) String() string { return proto.CompactTextString(m) }
func (*Error_Cause) ProtoMessage()    {}
func (*Error_Cause) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e1a04ad0f6e2726, []int{4, 0}
}
func (m *Error_Cause) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error_Cause) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error_Cause.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error_Cause) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error_Cause.Merge(m, src)
}
func (m *Error_Cause) XXX_Size() int {
	return m.Size()
}
func (m *Error_Cause) XXX_DiscardUnknown() {
	xxx_messageInfo_Error_Cause.DiscardUnknown(m)
}

var xxx_messageInfo_Error_Cause proto.InternalMessageInfo

type isError_Cause_Cause interface {
	isError_Cause_Cause()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Error_Cause_Unknown_ struct {
	Unknown *Error_Cause_Unknown `protobuf:"bytes,1,opt,name=unknown,proto3,oneof" json:"unknown,omitempty"`
}
type Error_Cause_Protocol_ struct {
	Protocol *Error_Cause_Protocol `protobuf:"bytes,2,opt,name=protocol,proto3,oneof" json:"protocol,omitempty"`
}
type Error_Cause_Ric_ struct {
	Ric *Error_Cause_Ric `protobuf:"bytes,3,opt,name=ric,proto3,oneof" json:"ric,omitempty"`
}
type Error_Cause_RicService_ struct {
	RicService *Error_Cause_RicService `protobuf:"bytes,4,opt,name=ric_service,json=ricService,proto3,oneof" json:"ric_service,omitempty"`
}
type Error_Cause_Transport_ struct {
	Transport *Error_Cause_Transport `protobuf:"bytes,5,opt,name=transport,proto3,oneof" json:"transport,omitempty"`
}

func (*Error_Cause_Unknown_) isError_Cause_Cause()    {}
func (*Error_Cause_Protocol_) isError_Cause_Cause()   {}
func (*Error_Cause_Ric_) isError_Cause_Cause()        {}
func (*Error_Cause_RicService_) isError_Cause_Cause() {}
func (*Error_Cause_Transport_) isError_Cause_Cause()  {}

func (m *Error_Cause) GetCause() isError_Cause_Cause {
	if m != nil {
		return m.Cause
	}
	return nil
}

func (m *Error_Cause) GetUnknown() *Error_Cause_Unknown {
	if x, ok := m.GetCause().(*Error_Cause_Unknown_); ok {
		return x.Unknown
	}
	return nil
}

func (m *Error_Cause) GetProtocol() *Error_Cause_Protocol {
	if x, ok := m.GetCause().(*Error_Cause_Protocol_); ok {
		return x.Protocol
	}
	return nil
}

func (m *Error_Cause) GetRic() *Error_Cause_Ric {
	if x, ok := m.GetCause().(*Error_Cause_Ric_); ok {
		return x.Ric
	}
	return nil
}

func (m *Error_Cause) GetRicService() *Error_Cause_RicService {
	if x, ok := m.GetCause().(*Error_Cause_RicService_); ok {
		return x.RicService
	}
	return nil
}

func (m *Error_Cause) GetTransport() *Error_Cause_Transport {
	if x, ok := m.GetCause().(*Error_Cause_Transport_); ok {
		return x.Transport
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Error_Cause) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Error_Cause_Unknown_)(nil),
		(*Error_Cause_Protocol_)(nil),
		(*Error_Cause_Ric_)(nil),
		(*Error_Cause_RicService_)(nil),
		(*Error_Cause_Transport_)(nil),
	}
}

type Error_Cause_Unknown struct {
}

func (m *Error_Cause_Unknown) Reset()         { *m = Error_Cause_Unknown{} }
func (m *Error_Cause_Unknown) String() string { return proto.CompactTextString(m) }
func (*Error_Cause_Unknown) ProtoMessage()    {}
func (*Error_Cause_Unknown) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e1a04ad0f6e2726, []int{4, 0, 0}
}
func (m *Error_Cause_Unknown) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error_Cause_Unknown) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error_Cause_Unknown.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error_Cause_Unknown) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error_Cause_Unknown.Merge(m, src)
}
func (m *Error_Cause_Unknown) XXX_Size() int {
	return m.Size()
}
func (m *Error_Cause_Unknown) XXX_DiscardUnknown() {
	xxx_messageInfo_Error_Cause_Unknown.DiscardUnknown(m)
}

var xxx_messageInfo_Error_Cause_Unknown proto.InternalMessageInfo

type Error_Cause_Misc struct {
}

func (m *Error_Cause_Misc) Reset()         { *m = Error_Cause_Misc{} }
func (m *Error_Cause_Misc) String() string { return proto.CompactTextString(m) }
func (*Error_Cause_Misc) ProtoMessage()    {}
func (*Error_Cause_Misc) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e1a04ad0f6e2726, []int{4, 0, 1}
}
func (m *Error_Cause_Misc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error_Cause_Misc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error_Cause_Misc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error_Cause_Misc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error_Cause_Misc.Merge(m, src)
}
func (m *Error_Cause_Misc) XXX_Size() int {
	return m.Size()
}
func (m *Error_Cause_Misc) XXX_DiscardUnknown() {
	xxx_messageInfo_Error_Cause_Misc.DiscardUnknown(m)
}

var xxx_messageInfo_Error_Cause_Misc proto.InternalMessageInfo

type Error_Cause_Protocol struct {
}

func (m *Error_Cause_Protocol) Reset()         { *m = Error_Cause_Protocol{} }
func (m *Error_Cause_Protocol) String() string { return proto.CompactTextString(m) }
func (*Error_Cause_Protocol) ProtoMessage()    {}
func (*Error_Cause_Protocol) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e1a04ad0f6e2726, []int{4, 0, 2}
}
func (m *Error_Cause_Protocol) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error_Cause_Protocol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error_Cause_Protocol.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error_Cause_Protocol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error_Cause_Protocol.Merge(m, src)
}
func (m *Error_Cause_Protocol) XXX_Size() int {
	return m.Size()
}
func (m *Error_Cause_Protocol) XXX_DiscardUnknown() {
	xxx_messageInfo_Error_Cause_Protocol.DiscardUnknown(m)
}

var xxx_messageInfo_Error_Cause_Protocol proto.InternalMessageInfo

type Error_Cause_Ric struct {
}

func (m *Error_Cause_Ric) Reset()         { *m = Error_Cause_Ric{} }
func (m *Error_Cause_Ric) String() string { return proto.CompactTextString(m) }
func (*Error_Cause_Ric) ProtoMessage()    {}
func (*Error_Cause_Ric) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e1a04ad0f6e2726, []int{4, 0, 3}
}
func (m *Error_Cause_Ric) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error_Cause_Ric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error_Cause_Ric.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error_Cause_Ric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error_Cause_Ric.Merge(m, src)
}
func (m *Error_Cause_Ric) XXX_Size() int {
	return m.Size()
}
func (m *Error_Cause_Ric) XXX_DiscardUnknown() {
	xxx_messageInfo_Error_Cause_Ric.DiscardUnknown(m)
}

var xxx_messageInfo_Error_Cause_Ric proto.InternalMessageInfo

type Error_Cause_RicService struct {
}

func (m *Error_Cause_RicService) Reset()         { *m = Error_Cause_RicService{} }
func (m *Error_Cause_RicService) String() string { return proto.CompactTextString(m) }
func (*Error_Cause_RicService) ProtoMessage()    {}
func (*Error_Cause_RicService) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e1a04ad0f6e2726, []int{4, 0, 4}
}
func (m *Error_Cause_RicService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error_Cause_RicService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error_Cause_RicService.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error_Cause_RicService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error_Cause_RicService.Merge(m, src)
}
func (m *Error_Cause_RicService) XXX_Size() int {
	return m.Size()
}
func (m *Error_Cause_RicService) XXX_DiscardUnknown() {
	xxx_messageInfo_Error_Cause_RicService.DiscardUnknown(m)
}

var xxx_messageInfo_Error_Cause_RicService proto.InternalMessageInfo

type Error_Cause_Transport struct {
}

func (m *Error_Cause_Transport) Reset()         { *m = Error_Cause_Transport{} }
func (m *Error_Cause_Transport) String() string { return proto.CompactTextString(m) }
func (*Error_Cause_Transport) ProtoMessage()    {}
func (*Error_Cause_Transport) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e1a04ad0f6e2726, []int{4, 0, 5}
}
func (m *Error_Cause_Transport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error_Cause_Transport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error_Cause_Transport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error_Cause_Transport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error_Cause_Transport.Merge(m, src)
}
func (m *Error_Cause_Transport) XXX_Size() int {
	return m.Size()
}
func (m *Error_Cause_Transport) XXX_DiscardUnknown() {
	xxx_messageInfo_Error_Cause_Transport.DiscardUnknown(m)
}

var xxx_messageInfo_Error_Cause_Transport proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("onos.e2t.e2ap.EncodingType", EncodingType_name, EncodingType_value)
	proto.RegisterEnum("onos.e2t.e2ap.Error_Cause_Misc_Type", Error_Cause_Misc_Type_name, Error_Cause_Misc_Type_value)
	proto.RegisterEnum("onos.e2t.e2ap.Error_Cause_Protocol_Type", Error_Cause_Protocol_Type_name, Error_Cause_Protocol_Type_value)
	proto.RegisterEnum("onos.e2t.e2ap.Error_Cause_Ric_Type", Error_Cause_Ric_Type_name, Error_Cause_Ric_Type_value)
	proto.RegisterEnum("onos.e2t.e2ap.Error_Cause_RicService_Type", Error_Cause_RicService_Type_name, Error_Cause_RicService_Type_value)
	proto.RegisterEnum("onos.e2t.e2ap.Error_Cause_Transport_Type", Error_Cause_Transport_Type_name, Error_Cause_Transport_Type_value)
	proto.RegisterType((*Source)(nil), "onos.e2t.e2ap.Source")
	proto.RegisterType((*Target)(nil), "onos.e2t.e2ap.Target")
	proto.RegisterType((*ServiceModel)(nil), "onos.e2t.e2ap.ServiceModel")
	proto.RegisterType((*Payload)(nil), "onos.e2t.e2ap.Payload")
	proto.RegisterType((*Error)(nil), "onos.e2t.e2ap.Error")
	proto.RegisterType((*Error_Cause)(nil), "onos.e2t.e2ap.Error.Cause")
	proto.RegisterType((*Error_Cause_Unknown)(nil), "onos.e2t.e2ap.Error.Cause.Unknown")
	proto.RegisterType((*Error_Cause_Misc)(nil), "onos.e2t.e2ap.Error.Cause.Misc")
	proto.RegisterType((*Error_Cause_Protocol)(nil), "onos.e2t.e2ap.Error.Cause.Protocol")
	proto.RegisterType((*Error_Cause_Ric)(nil), "onos.e2t.e2ap.Error.Cause.Ric")
	proto.RegisterType((*Error_Cause_RicService)(nil), "onos.e2t.e2ap.Error.Cause.RicService")
	proto.RegisterType((*Error_Cause_Transport)(nil), "onos.e2t.e2ap.Error.Cause.Transport")
}

func init() { proto.RegisterFile("onos/e2t/e2ap/e2ap.proto", fileDescriptor_0e1a04ad0f6e2726) }

var fileDescriptor_0e1a04ad0f6e2726 = []byte{
	// 997 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xf6, 0xf7, 0xc7, 0x9b, 0xb4, 0x5d, 0xa6, 0x09, 0x71, 0x1d, 0x64, 0x57, 0x06, 0x44, 0x29,
	0x92, 0x43, 0x8c, 0xca, 0x01, 0x24, 0xd4, 0xf1, 0x7a, 0x1c, 0x0f, 0xac, 0x67, 0xcd, 0xcc, 0xac,
	0x93, 0x9c, 0x46, 0x8b, 0xbd, 0x8a, 0xac, 0xa4, 0xde, 0x65, 0xed, 0x14, 0xe5, 0x27, 0x70, 0x43,
	0xfc, 0x15, 0x8e, 0xfc, 0x01, 0x8e, 0x3d, 0x21, 0x4e, 0x11, 0x72, 0xfe, 0x45, 0xc4, 0x01, 0xcd,
	0x7a, 0xd7, 0x76, 0xab, 0x26, 0x97, 0xd5, 0xcc, 0xfb, 0x3e, 0xef, 0xf3, 0xbc, 0x5f, 0x3b, 0x50,
	0xf1, 0xa7, 0xfe, 0xec, 0xc0, 0x6b, 0xcd, 0x0f, 0xbc, 0x96, 0x1b, 0x44, 0x9f, 0x66, 0x10, 0xfa,
	0x73, 0x1f, 0x3d, 0xd0, 0x9e, 0xa6, 0xd7, 0x9a, 0x37, 0xb5, 0xb1, 0xba, 0x73, 0xe6, 0x9f, 0xf9,
	0x91, 0xe7, 0x40, 0x9f, 0x96, 0xa0, 0x86, 0x0f, 0x05, 0xe1, 0x5f, 0x86, 0x23, 0x0f, 0x7d, 0x0e,
	0x05, 0x37, 0x08, 0xd4, 0x64, 0x5c, 0x49, 0x3f, 0x4d, 0x3f, 0x2b, 0xb7, 0xd1, 0xe2, 0xba, 0x9e,
	0xc7, 0x41, 0x40, 0x3b, 0xb7, 0xc9, 0x81, 0xe7, 0xdd, 0x20, 0xa0, 0x63, 0xf4, 0x0d, 0x6c, 0x69,
	0xe8, 0xd4, 0x1f, 0x7b, 0x1a, 0x9f, 0x89, 0xf0, 0xd5, 0xc5, 0x75, 0xbd, 0x8c, 0x83, 0x80, 0xf9,
	0x63, 0x2f, 0x8a, 0x59, 0x5f, 0x78, 0xd9, 0x8d, 0x8f, 0xe3, 0xc6, 0x4b, 0x28, 0x48, 0x37, 0x3c,
	0xf3, 0xe6, 0xe8, 0x6b, 0x00, 0xaf, 0xb5, 0x22, 0x59, 0x8a, 0x56, 0x16, 0xd7, 0xf5, 0x12, 0x69,
	0xad, 0x38, 0x56, 0x67, 0x5e, 0xf2, 0x5a, 0x31, 0xc3, 0x39, 0x6c, 0x0b, 0x2f, 0x7c, 0x3d, 0x19,
	0x79, 0x7d, 0x7f, 0xec, 0x5d, 0xa0, 0x67, 0x90, 0x9b, 0xba, 0xaf, 0xbc, 0x98, 0x61, 0xe7, 0xf6,
	0xba, 0x6e, 0x6c, 0xfa, 0x99, 0xfb, 0xca, 0xe3, 0x11, 0x02, 0x1d, 0x42, 0xf1, 0xb5, 0x17, 0xce,
	0x26, 0xfe, 0x34, 0xce, 0x79, 0xef, 0xf6, 0xba, 0xfe, 0x78, 0x13, 0x3c, 0x5c, 0xba, 0x79, 0x82,
	0x6b, 0x28, 0x28, 0x0e, 0xdc, 0xab, 0x0b, 0xdf, 0x1d, 0xa3, 0x97, 0xf0, 0xc0, 0x9b, 0x8e, 0xfc,
	0xf1, 0x64, 0x7a, 0xa6, 0xe6, 0x57, 0xc1, 0x52, 0xf0, 0x61, 0x6b, 0xbf, 0xf9, 0x56, 0x9f, 0x9b,
	0x24, 0xc6, 0xc8, 0xab, 0xc0, 0xe3, 0xdb, 0xde, 0xc6, 0x0d, 0x21, 0xc8, 0x8d, 0xdd, 0xb9, 0x1b,
	0x89, 0x6f, 0xf3, 0xe8, 0xdc, 0xf8, 0x1d, 0x20, 0x4f, 0xc2, 0xd0, 0x0f, 0xd1, 0x97, 0x90, 0x1f,
	0xb9, 0x97, 0xb3, 0x25, 0xef, 0x56, 0xab, 0xfa, 0x2e, 0xaf, 0x06, 0x35, 0x4d, 0x8d, 0xe0, 0x4b,
	0x60, 0xf5, 0xef, 0x32, 0xe4, 0x23, 0x03, 0xfa, 0x0e, 0x8a, 0x97, 0xd3, 0xf3, 0xa9, 0xff, 0xcb,
	0x34, 0x8e, 0x6e, 0xdc, 0x1d, 0xdd, 0x74, 0x96, 0xc8, 0x5e, 0x8a, 0x27, 0x41, 0x08, 0x43, 0x29,
	0xda, 0x87, 0x91, 0x7f, 0x11, 0x65, 0xb7, 0xd5, 0xfa, 0xf8, 0x1e, 0x82, 0x41, 0x0c, 0xed, 0xa5,
	0xf8, 0x2a, 0x0c, 0xb5, 0x20, 0x1b, 0x4e, 0x46, 0x95, 0x6c, 0x14, 0x5d, 0xbb, 0x27, 0x9a, 0x4f,
	0x46, 0xbd, 0x14, 0xd7, 0x60, 0xd4, 0x83, 0xad, 0x70, 0x32, 0x52, 0xb3, 0xe5, 0x04, 0x2a, 0xb9,
	0x28, 0xf6, 0xd3, 0xfb, 0x63, 0xe3, 0x71, 0xf5, 0x52, 0x1c, 0xc2, 0xd5, 0x0d, 0x75, 0xa0, 0x3c,
	0x0f, 0xdd, 0xe9, 0x2c, 0xf0, 0xc3, 0x79, 0x25, 0x1f, 0xf1, 0x7c, 0x72, 0x0f, 0x8f, 0x4c, 0xb0,
	0xbd, 0x14, 0x5f, 0x07, 0x56, 0xcb, 0x50, 0x8c, 0x9b, 0x53, 0x3d, 0x87, 0x5c, 0x7f, 0x32, 0x1b,
	0x35, 0x46, 0x90, 0x8b, 0x66, 0xf7, 0x08, 0xb6, 0x1c, 0x26, 0x06, 0xc4, 0xa4, 0x5d, 0x4a, 0x3a,
	0x46, 0x0a, 0xd5, 0x61, 0xdf, 0xb4, 0x99, 0xe4, 0xb6, 0xa5, 0x06, 0xdc, 0x36, 0x89, 0x10, 0x94,
	0x1d, 0x29, 0x7b, 0x48, 0xb8, 0x65, 0xe3, 0x8e, 0x91, 0x46, 0x3b, 0x60, 0xf4, 0x30, 0xef, 0x1c,
	0x63, 0x4e, 0x54, 0x17, 0x53, 0xcb, 0xe1, 0xc4, 0xc8, 0xa0, 0xc7, 0xf0, 0xc8, 0xee, 0x2b, 0xca,
	0x24, 0xe1, 0x43, 0xc2, 0x24, 0xb5, 0x99, 0x91, 0xad, 0xfe, 0x9a, 0x81, 0x52, 0xd2, 0xd4, 0xc6,
	0x7f, 0xe9, 0xbb, 0x24, 0x9f, 0xc0, 0xae, 0xe4, 0x98, 0x89, 0x2e, 0xe1, 0x4a, 0x9c, 0x32, 0x89,
	0x4f, 0x14, 0xe1, 0xdc, 0xe6, 0x46, 0x1a, 0x3d, 0x85, 0x8f, 0x70, 0x5b, 0x48, 0x8e, 0x4d, 0xf9,
	0x96, 0x4b, 0x71, 0xf2, 0x3d, 0x31, 0xa5, 0x91, 0x41, 0x5f, 0xc0, 0x67, 0xef, 0x47, 0xd0, 0x23,
	0x66, 0x73, 0xa2, 0x30, 0xeb, 0x28, 0x66, 0x4b, 0xda, 0x3d, 0x35, 0xb2, 0xa8, 0x09, 0xcf, 0xfb,
	0x44, 0x08, 0x7c, 0x44, 0xb4, 0x4d, 0x99, 0x76, 0x7f, 0x80, 0x25, 0x6d, 0x5b, 0x44, 0x1d, 0x53,
	0xd9, 0x53, 0x9c, 0x98, 0x84, 0x0e, 0x75, 0x16, 0x12, 0x4b, 0x62, 0xe4, 0x10, 0x82, 0x87, 0x82,
	0xf4, 0x31, 0x93, 0xd4, 0x8c, 0x53, 0xca, 0xa3, 0x17, 0x70, 0xf8, 0x7e, 0xc1, 0x2e, 0xb6, 0x04,
	0xb1, 0x4e, 0x95, 0x69, 0x33, 0x21, 0xb9, 0x63, 0x4a, 0xd2, 0x51, 0xb1, 0x9a, 0x51, 0xa8, 0xfe,
	0x99, 0x81, 0x2c, 0x9f, 0x8c, 0x1a, 0x7f, 0x64, 0xee, 0x6a, 0xc3, 0x3e, 0xec, 0x71, 0xcc, 0x54,
	0xd7, 0x61, 0xa6, 0xee, 0x9f, 0xa2, 0x1d, 0x45, 0xd9, 0x10, 0x5b, 0x54, 0x77, 0xbd, 0x02, 0x3b,
	0x78, 0x69, 0xd6, 0x89, 0x0b, 0x67, 0x30, 0xb0, 0xb9, 0x24, 0x1d, 0x23, 0x83, 0x76, 0xe1, 0x03,
	0x72, 0x12, 0xcd, 0x69, 0x48, 0xd4, 0x12, 0x23, 0x8c, 0xac, 0x1e, 0x53, 0xc7, 0x19, 0x58, 0xd4,
	0xc4, 0x32, 0x31, 0x1b, 0x39, 0x3d, 0xa6, 0xb5, 0x95, 0xe8, 0x49, 0x19, 0x79, 0x2d, 0xbc, 0x12,
	0xe5, 0x44, 0xd8, 0x0e, 0x37, 0x89, 0xb2, 0x68, 0x9f, 0x4a, 0xa3, 0x80, 0x3e, 0x04, 0xc4, 0xc9,
	0x8f, 0x0e, 0x11, 0x52, 0x27, 0xe4, 0xb0, 0x1f, 0x98, 0x7d, 0xcc, 0x8c, 0x22, 0x6a, 0x41, 0x93,
	0x32, 0x5d, 0x2a, 0x15, 0x92, 0x30, 0x19, 0x4b, 0x28, 0xe1, 0xb4, 0x85, 0x86, 0x6f, 0x58, 0xa2,
	0xab, 0x49, 0x8c, 0x92, 0x16, 0x4a, 0x76, 0x2b, 0x19, 0x43, 0x52, 0x61, 0x39, 0x72, 0x62, 0x6b,
	0xb5, 0x75, 0x9b, 0xe5, 0x43, 0xf5, 0x67, 0x80, 0xf5, 0x3f, 0x72, 0xf7, 0xf2, 0x3e, 0x81, 0xdd,
	0x55, 0x25, 0xba, 0x4f, 0x3a, 0x73, 0xca, 0x89, 0x6e, 0xe0, 0x1e, 0x3c, 0x5e, 0xb7, 0x29, 0x01,
	0x09, 0x23, 0x13, 0x15, 0x48, 0xcd, 0x77, 0x0b, 0xcf, 0x56, 0x7b, 0x50, 0x5e, 0xfd, 0x4e, 0x8d,
	0x6f, 0xef, 0x52, 0x6c, 0x40, 0x2d, 0xda, 0x5d, 0x3d, 0x8e, 0x35, 0x87, 0xc3, 0xf0, 0x10, 0x53,
	0x0b, 0xb7, 0x2d, 0x62, 0xa4, 0xdb, 0xc5, 0xf8, 0x05, 0x7c, 0xfe, 0x02, 0xb6, 0x37, 0x9f, 0x51,
	0x54, 0x86, 0xfc, 0x80, 0xdb, 0xd2, 0x36, 0x52, 0x68, 0x1b, 0x4a, 0x58, 0xb0, 0x43, 0x35, 0x20,
	0x7a, 0xed, 0x93, 0xdb, 0x09, 0xe1, 0x46, 0xa6, 0x5d, 0xf9, 0x6b, 0x51, 0x4b, 0xbf, 0x59, 0xd4,
	0xd2, 0xff, 0x2e, 0x6a, 0xe9, 0xdf, 0x6e, 0x6a, 0xa9, 0x37, 0x37, 0xb5, 0xd4, 0x3f, 0x37, 0xb5,
	0xd4, 0x4f, 0x85, 0xe8, 0x99, 0xfa, 0xea, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xba, 0xb4, 0x6c,
	0xb2, 0x2e, 0x07, 0x00, 0x00,
}

func (m *Source) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Source) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Source) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AppNodeID) > 0 {
		i -= len(m.AppNodeID)
		copy(dAtA[i:], m.AppNodeID)
		i = encodeVarintE2Ap(dAtA, i, uint64(len(m.AppNodeID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AppID) > 0 {
		i -= len(m.AppID)
		copy(dAtA[i:], m.AppID)
		i = encodeVarintE2Ap(dAtA, i, uint64(len(m.AppID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Target) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Target) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Target) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.E2NodeID) > 0 {
		i -= len(m.E2NodeID)
		copy(dAtA[i:], m.E2NodeID)
		i = encodeVarintE2Ap(dAtA, i, uint64(len(m.E2NodeID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintE2Ap(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintE2Ap(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Payload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Payload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Payload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintE2Ap(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.EncodingType != 0 {
		i = encodeVarintE2Ap(dAtA, i, uint64(m.EncodingType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cause != nil {
		{
			size, err := m.Cause.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2Ap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Error_Cause) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error_Cause) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error_Cause) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cause != nil {
		{
			size := m.Cause.Size()
			i -= size
			if _, err := m.Cause.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Error_Cause_Unknown_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error_Cause_Unknown_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Unknown != nil {
		{
			size, err := m.Unknown.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2Ap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Error_Cause_Protocol_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error_Cause_Protocol_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Protocol != nil {
		{
			size, err := m.Protocol.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2Ap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Error_Cause_Ric_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error_Cause_Ric_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ric != nil {
		{
			size, err := m.Ric.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2Ap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Error_Cause_RicService_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error_Cause_RicService_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RicService != nil {
		{
			size, err := m.RicService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2Ap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Error_Cause_Transport_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error_Cause_Transport_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Transport != nil {
		{
			size, err := m.Transport.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2Ap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Error_Cause_Unknown) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error_Cause_Unknown) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error_Cause_Unknown) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Error_Cause_Misc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error_Cause_Misc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error_Cause_Misc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Error_Cause_Protocol) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error_Cause_Protocol) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error_Cause_Protocol) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Error_Cause_Ric) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error_Cause_Ric) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error_Cause_Ric) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Error_Cause_RicService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error_Cause_RicService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error_Cause_RicService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Error_Cause_Transport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error_Cause_Transport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error_Cause_Transport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintE2Ap(dAtA []byte, offset int, v uint64) int {
	offset -= sovE2Ap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Source) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppID)
	if l > 0 {
		n += 1 + l + sovE2Ap(uint64(l))
	}
	l = len(m.AppNodeID)
	if l > 0 {
		n += 1 + l + sovE2Ap(uint64(l))
	}
	return n
}

func (m *Target) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.E2NodeID)
	if l > 0 {
		n += 1 + l + sovE2Ap(uint64(l))
	}
	return n
}

func (m *ServiceModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovE2Ap(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovE2Ap(uint64(l))
	}
	return n
}

func (m *Payload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EncodingType != 0 {
		n += 1 + sovE2Ap(uint64(m.EncodingType))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovE2Ap(uint64(l))
	}
	return n
}

func (m *Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cause != nil {
		l = m.Cause.Size()
		n += 1 + l + sovE2Ap(uint64(l))
	}
	return n
}

func (m *Error_Cause) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cause != nil {
		n += m.Cause.Size()
	}
	return n
}

func (m *Error_Cause_Unknown_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Unknown != nil {
		l = m.Unknown.Size()
		n += 1 + l + sovE2Ap(uint64(l))
	}
	return n
}
func (m *Error_Cause_Protocol_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Protocol != nil {
		l = m.Protocol.Size()
		n += 1 + l + sovE2Ap(uint64(l))
	}
	return n
}
func (m *Error_Cause_Ric_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ric != nil {
		l = m.Ric.Size()
		n += 1 + l + sovE2Ap(uint64(l))
	}
	return n
}
func (m *Error_Cause_RicService_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RicService != nil {
		l = m.RicService.Size()
		n += 1 + l + sovE2Ap(uint64(l))
	}
	return n
}
func (m *Error_Cause_Transport_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transport != nil {
		l = m.Transport.Size()
		n += 1 + l + sovE2Ap(uint64(l))
	}
	return n
}
func (m *Error_Cause_Unknown) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Error_Cause_Misc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Error_Cause_Protocol) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Error_Cause_Ric) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Error_Cause_RicService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Error_Cause_Transport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovE2Ap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozE2Ap(x uint64) (n int) {
	return sovE2Ap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Source) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2Ap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Source: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Source: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Ap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2Ap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2Ap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppID = AppID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppNodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Ap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2Ap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2Ap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppNodeID = AppNodeID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2Ap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2Ap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2Ap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Target) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2Ap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Target: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Target: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field E2NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Ap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2Ap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2Ap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.E2NodeID = E2NodeID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2Ap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2Ap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2Ap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2Ap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Ap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2Ap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2Ap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = ServiceModelName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Ap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2Ap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2Ap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = ServiceModelVersion(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2Ap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2Ap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2Ap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Payload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2Ap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Payload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Payload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodingType", wireType)
			}
			m.EncodingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Ap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncodingType |= EncodingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Ap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthE2Ap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthE2Ap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2Ap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2Ap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2Ap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2Ap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cause", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Ap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2Ap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2Ap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cause == nil {
				m.Cause = &Error_Cause{}
			}
			if err := m.Cause.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2Ap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2Ap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2Ap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error_Cause) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2Ap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cause: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cause: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unknown", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Ap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2Ap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2Ap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Error_Cause_Unknown{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cause = &Error_Cause_Unknown_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Ap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2Ap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2Ap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Error_Cause_Protocol{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cause = &Error_Cause_Protocol_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Ap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2Ap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2Ap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Error_Cause_Ric{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cause = &Error_Cause_Ric_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RicService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Ap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2Ap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2Ap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Error_Cause_RicService{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cause = &Error_Cause_RicService_{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Ap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2Ap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2Ap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Error_Cause_Transport{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cause = &Error_Cause_Transport_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2Ap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2Ap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2Ap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error_Cause_Unknown) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2Ap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Unknown: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Unknown: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipE2Ap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2Ap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2Ap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error_Cause_Misc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2Ap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Misc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Misc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipE2Ap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2Ap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2Ap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error_Cause_Protocol) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2Ap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Protocol: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Protocol: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipE2Ap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2Ap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2Ap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error_Cause_Ric) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2Ap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipE2Ap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2Ap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2Ap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error_Cause_RicService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2Ap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RicService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RicService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipE2Ap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2Ap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2Ap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error_Cause_Transport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2Ap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipE2Ap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2Ap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2Ap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipE2Ap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowE2Ap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowE2Ap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowE2Ap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthE2Ap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupE2Ap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthE2Ap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthE2Ap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowE2Ap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupE2Ap = fmt.Errorf("proto: unexpected end of group")
)
